FEATURE PROPOSAL COMMAND VALIDATION CHECKLIST
===============================================
Date: 2025-07-03
Purpose: Validation checklist for feature-proposal command execution
Usage: Compare actual agent execution against these expected steps and outcomes

COMMAND INPUT VALIDATION
=========================
Expected Command: /project:feature-proposal [selected idea or feature description]

Expected $ARGUMENTS: "[selected idea or feature description from brainstorm phase]"

STEP-BY-STEP EXECUTION VALIDATION
==================================

STEP 1: Enable Extended Thinking Mode
Expected Actions (per 02_feature-proposal.md Step 1):
□ Read: docs/modules/thinking-mode.md
□ Activate visible reasoning process
□ Show multi-angle problem analysis
□ Document exploration and decision-making

STEP 2: Input Analysis Phase
Expected Actions (per 02_feature-proposal.md Step 2):
□ Read: docs/modules/workflow-integration.md
□ Read: docs/modules/tool-usage-patterns.md
□ Execute brainstorm integration:
  □ Access previous brainstorm output from same workflow directory
  □ Extract key insights from Research and Analysis sections
  □ Identify selected ideas from Recommendations section
□ Execute feature scope definition:
  □ Use codebase analysis tools for existing feature discovery
  □ Use external research tools for implementation pattern validation

Tool Sequence Validation:
□ Brainstorm file accessed via Read tool
□ Codebase analysis executed (Grep/Glob tools)
□ External research validation (WebSearch tool)
□ Integration documented with specific section references

STEP 3: Requirement Structuring Process
Expected Actions (per 02_feature-proposal.md Step 3):
□ Define clear user stories and acceptance criteria
□ Identify technical requirements and dependencies
□ Establish success metrics and validation criteria
□ Outline resource requirements and timeline estimates

STEP 4: Feasibility Assessment
Expected Actions (per 02_feature-proposal.md Step 4):
□ Evaluate technical complexity against current architecture
□ Assess resource requirements (development, design, testing)
□ Identify potential risks and mitigation strategies
□ Compare against alternative approaches from brainstorm phase

STEP 5: Structured Presentation
Expected Actions (per 02_feature-proposal.md Step 5):
□ Read: docs/modules/template-integration.md
□ Read: docs/modules/output-structure.md
□ Read: docs/templates/feature-proposal-output-template.md
□ Follow template structure exactly

STEP 6: Workflow Integration
Expected Actions (per 02_feature-proposal.md Step 6):
□ Read: docs/modules/workflow-integration.md
□ Ensure Integration section prepares for /project:feature-to-prd
□ Use same workflow directory as brainstorm command
□ Maintain topic consistency from previous command

BRAINSTORM INTEGRATION VALIDATION
==================================

Previous Command Integration:
□ Brainstorm output file identified and accessed
□ Source analysis documented with specific file reference
□ Selected ideas extracted from brainstorm Recommendations section
□ Research validation integrated from brainstorm Research section
□ Decision rationale for idea selection documented

Integration Quality Validation:
□ Brainstorm insights directly influence feature scope definition
□ Research findings from brainstorm inform feasibility assessment
□ Recommendations from brainstorm shape implementation approach
□ Context preserved from previous command execution

TEMPLATE COMPLIANCE VALIDATION
===============================

Required Template Sections (per feature-proposal-output-template.md):
□ Context
  □ Feature Overview: Clear description of proposed feature
  □ Business Justification: Why feature needed and expected impact
  □ Target Users: Primary and secondary user groups
  □ Success Metrics: How success will be measured

□ Research
  □ Brainstorm Integration: Source analysis, selected ideas, research validation
  □ Technical Feasibility: Current architecture, similar features, dependencies, patterns
  □ Competitive Analysis: Market research, differentiation, industry standards

□ Analysis
  □ Requirements Breakdown: Functional requirements (user stories, acceptance criteria, success scenarios, edge cases)
  □ Requirements Breakdown: Non-functional requirements (performance, security, accessibility, compatibility)
  □ Resource Assessment: Development effort, design requirements, testing strategy, documentation
  □ Risk Analysis: Technical risks, business risks, UX risks, mitigation strategies

□ Recommendations
  □ Implementation Approach: Recommended development strategy
  □ Priority Assessment: High/Medium/Low with justification
  □ Timeline Estimation: Phases and milestones
  □ Resource Allocation: Team members and skills needed
  □ Alternative Approaches: Other viable implementation options
  □ Minimum Viable Product (MVP): Core features for initial release

□ Integration
  □ PRD Preparation: Stakeholder review, additional requirements, technical specifications
  □ Command Transition: Ready for /project:feature-to-prd [feature name]
  □ Required Inputs: What next command needs
  □ Success Handoff: Validation criteria

FEASIBILITY MATRIX VALIDATION
==============================

Required Matrix Components (per feature-proposal-output-template.md):
□ Technical Complexity: Score (1-5) with justification
□ Resource Availability: Score (1-5) with justification
□ Business Impact: Score (1-5) with justification
□ User Value: Score (1-5) with justification
□ Implementation Risk: Score (1-5) with justification
□ Total Score: Sum/25 with overall assessment

Matrix Quality Validation:
□ All criteria scored with clear justification
□ Scores reflect analysis content consistency
□ Total score calculated correctly
□ Overall assessment matches individual scores

TOOL USAGE VALIDATION
======================

Required Tool Sequence:
□ Read tool used to access brainstorm output
□ Grep/Glob tools used for codebase analysis
□ WebSearch tool used for competitive/implementation research
□ Read tool used to access template structure
□ Write tool used to create output file

Tool Integration Quality:
□ Brainstorm integration documented with specific extractions
□ Codebase analysis informs technical feasibility
□ External research validates implementation patterns
□ Tool results directly support feasibility assessment

MODULE REFERENCE VALIDATION
============================

Template References (per feature-proposal-output-template.md):
□ Extended thinking: @docs/modules/thinking-mode.md
□ Tool usage: @docs/modules/tool-usage-patterns.md
□ Output structure: @docs/modules/output-structure.md
□ Template integration: @docs/modules/template-integration.md
□ Workflow integration: @docs/modules/workflow-integration.md

Command References (per 02_feature-proposal.md):
□ Step 1: @docs/modules/thinking-mode.md
□ Step 2: @docs/modules/workflow-integration.md + @docs/modules/tool-usage-patterns.md
□ Step 5: @docs/modules/template-integration.md + @docs/modules/output-structure.md
□ Step 6: @docs/modules/workflow-integration.md

OUTPUT FILE VALIDATION
=======================

Expected File Structure:
□ Directory: docs/outputs/sessions/[YYYY-MM-DD]/workflow-[NN]-[topic]/
□ Filename: feature-proposal-[feature-name]-[YYYY-MM-DD].md
□ Same workflow directory as brainstorm command
□ Topic consistency maintained from previous command

File Creation Process:
□ Use Write tool to create file
□ Same workflow directory as brainstorm command
□ Feature name extracted from $ARGUMENTS
□ Consistent naming convention followed

WORKFLOW INTEGRATION VALIDATION
================================

Command Chaining Requirements:
□ Second command in workflow sequence acknowledged
□ Previous brainstorm output successfully integrated
□ Integration section prepares for /project:feature-to-prd
□ Context and decision history preserved

Workflow Continuity:
□ Topic keywords consistent with brainstorm command
□ Research builds upon brainstorm findings
□ Recommendations flow logically from brainstorm analysis
□ Next command requirements clearly specified

EXPECTED OUTCOMES VALIDATION
=============================

Per 02_feature-proposal.md Expected Outcome section:
□ Comprehensive feature proposal with clear requirements
□ Technical feasibility assessment with supporting analysis
□ Structured requirements ready for PRD development
□ Risk assessment and mitigation strategies
□ Clear next steps for project planning phase

Content Quality Indicators:
□ All user stories have acceptance criteria
□ Technical feasibility thoroughly assessed
□ Resource requirements are realistic
□ Risks identified with mitigation strategies
□ Success metrics are measurable
□ Integration section prepares for PRD development
□ Feasibility matrix completed accurately

INTEGRATION NOTES VALIDATION
=============================

Per 02_feature-proposal.md Integration Notes:
□ Command recognized as second step in workflow: brainstorm → feature-proposal → feature-to-prd → feature-planning → task-creation
□ Results provide structured input for PRD development and project planning
□ Integration section includes: "Ready for: /project:feature-to-prd [feature name]"

VALIDATION CHECKLIST SCORING
=============================

Process Compliance (25 points):
□ All 6 command steps followed (15 pts)
□ Brainstorm integration completed (5 pts)
□ Workflow continuity maintained (5 pts)

Module Integration (20 points):
□ All required modules read (10 pts)
□ Template structure followed exactly (10 pts)

Research Quality (25 points):
□ Brainstorm output successfully integrated (8 pts)
□ Codebase analysis executed (5 pts)
□ External research validation completed (7 pts)
□ Cross-reference validation documented (5 pts)

Output Quality (30 points):
□ All template sections completed (15 pts)
□ Feasibility matrix accurately completed (5 pts)
□ File created in correct location (5 pts)
□ Integration section ready for next command (5 pts)

TOTAL SCORE: ___/100 points
PASS CRITERIA: 80/100 points

CRITICAL FAILURE POINTS
========================
□ Missing brainstorm output integration
□ Template sections incomplete or missing
□ Feasibility matrix not completed or inaccurate
□ File created in wrong directory or incorrect naming
□ Integration section missing feature-to-prd preparation
□ User stories without acceptance criteria
□ Requirements too vague or untestable
□ Risk assessment missing mitigation strategies
□ Timeline estimates unrealistic or missing
□ Thinking mode not activated or visible
□ Previous command context not preserved
□ Workflow continuity broken (topic inconsistency)